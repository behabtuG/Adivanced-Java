Java Collection framework provides a Stack class that models and implements a Stack data structure.
 The class is based on the basic principle of last-in-first-out. In addition to the basic push and pop operations,
 the class provides three more functions of empty, search, and peek. The class can also be said to extend Vector and
 treats the class as a stack with the five mentioned functions. The class can also be referred to as the subclass of Vector.
The class supports one default constructor Stack() which is used to create an empty stack.
Declaration:

public class Stack<E> extends Vector<E>

All Implemented Interfaces:

   . Serializable: It is a marker interface that classes must implement if they are to be serialized and deserialized.
   . Cloneable: This is an interface in Java which needs to be implemented by a class to allow its objects to be cloned.
   . Iterable<E>: This interface represents a collection of objects which is iterable â€” meaning which can be iterated.
   . Collection<E>: A Collection represents a group of objects known as its elements. The Collection interface is used
     to pass around collections of objects where maximum generality is desired.
   . List<E>: The List interface provides a way to store the ordered collection. It is a child interface of Collection.
   . RandomAccess: This is a marker interface used by List implementations to indicate that they support fast (generally constant time) random access.

How to Create a Stack?

  In order to create a stack, we must import java.util.stack package and use the Stack() constructor of this class. The below example creates an empty Stack.

    Stack<E> stack = new Stack<E>();

    Here E is the type of Object.

  Performing various operations on Stack class

    1. Adding Elements: In order to add an element to the stack, we can use the push() method. This push() operation place the element at the top of the stack.

    2. Accessing the Element: To retrieve or fetch the first element of the Stack or the element present at the top of the Stack, we can use peek() method.
       The element retrieved does not get deleted or removed from the Stack.

    3. Removing Elements: To pop an element from the stack, we can use the pop() method. The element is popped from the top of the stack and is removed from the same.

  Note: Please note that the Stack class in Java is a legacy class and inherits from Vector in Java. It is a thread-safe class and hence involves overhead when we do not need thread safety.
  It is recommended to use ArrayDeque for stack implementation as it is more efficient in a single-threaded environment.

  What is Stack?

  Stack is a linear data structure that follows a particular order in which the operations are performed.
  The order may be LIFO(Last In First Out) or FILO(First In Last Out).

  There are many real-life examples of a stack. Consider an example of plates stacked over one another in the canteen.
  The plate which is at the top is the first one to be removed, i.e. the plate which has been placed at the bottommost position
  remains in the stack for the longest period of time. So, it can be simply seen to follow LIFO(Last In First Out)/FILO(First In Last Out) order.