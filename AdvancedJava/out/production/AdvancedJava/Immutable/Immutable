Immutable class in java means that once an object is created, we cannot change its content. In Java, all the wrapper classes (like Integer,
Boolean, Byte, Short) and Strings class is immutable. We can create our own immutable class as well. Prior to going ahead do go through
characteristics of immutability in order to have a good understanding while implementing the same. Following are the requirements:

    . The class must be declared as final so that child classes can’t be created.
    . Data members in the class must be declared private so that direct access is not allowed.
    . Data members in the class must be declared as final so that we can’t change the value of it after object creation.
    . A parameterized constructor should initialize all the fields performing a deep copy so that data members can’t be modified with an object
      reference.
    . Deep Copy of objects should be performed in the getter methods to return a copy rather than returning the actual object reference)

    Note: There should be no setters or in simpler terms, there should be no option to change the value of the instance variable.

    Student class Example

      In this example, we have created a final class named Student. It has three final data members, a parameterized constructor, and getter
      methods. Please note that there is no setter method here. Also, note that we don’t need to perform deep copy or cloning of data members
      of wrapper types as they are already immutable.

