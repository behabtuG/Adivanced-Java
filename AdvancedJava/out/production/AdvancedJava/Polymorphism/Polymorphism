The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message to be displayed in
more than one form.
Real-life Illustration: Polymorphisms

A person at the same time can have different characteristics. Like a man at the same time is a father, a husband, an employee. So the same
person possesses different behavior in different situations. This is called polymorphism.
Polymorphisms is considered one of the important features of Object-Oriented Programming. Polymorphisms allows us to perform a single action
in different ways. In other words, polymorphism allows you to define one interface and have multiple implementations. The word “poly” means
many and “morphs” means forms, So it means many forms.

  Types of polymorphism
    In Java polymorphism is mainly divided into two types:

        . Compile-time Polymorphisms
        . Runtime Polymorphisms

    Type 1: Compile-time polymorphism

      It is also known as static polymorphism. This type of polymorphism is achieved by function overloading or operator overloading.

       Note: But Java doesn’t support the Operator Overloading.

       Method Overloading: When there are multiple functions with the same name but different parameters then these functions are said to be
       overloaded. Functions can be overloaded by change in the number of arguments or/and a change in the type of arguments.

    Type 2: Runtime polymorphism

      It is also known as Dynamic Method Dispatch. It is a process in which a function call to the overridden method is resolved at Runtime.
      This type of polymorphism is achieved by Method Overriding. Method overriding, on the other hand, occurs when a derived class has a
      definition for one of the member functions of the base class. That base function is said to be overridden.

     Output explanation:

    parent class example

     Here in this program, When an object of child class is created, then the method inside the child class is called. This is because
     The method in the parent class is overridden by the child class. Since The method is overridden, This method has more priority than
     the parent method inside the child class. So, the body inside the child class is executed.