An Interface in Java programming language is defined as an abstract type used to specify the behavior of a class. An interface in Java is a blueprint of a behaviour.
A Java interface contains static constants and abstract methods.

The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not the method body. It is used to achieve abstraction and multiple inheritance in Java.
  In other words, you can say that interfaces can have abstract methods and variables. It cannot have a method body. Java Interface also represents the IS-A relationship.

When we decide a type of entity by its behaviour and not via attribute we should define it as an interface.

Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, no body).

. Interfaces specify what a class must do and not how. It is the blueprint of the behaviour.
. Interface do not have constructor.
. Represent behaviour as interface unless every sub-type of the class is guarantee to have that behaviour.
. An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.
. If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract.
. A Java library example is Comparator Interface. If a class implements this interface, then it can be used to sort a collection.

Syntax:

interface {

    // declare constant fields
    // declare methods that abstract
    // by default.
}

To declare an interface, use the interface keyword. It is used to provide total abstraction. That means all the methods in an interface are declared with an empty body and are public and all fields are public, static, and final by default.
A class that implements an interface must implement all the methods declared in the interface. To implement interface use implements keyword.

Why do we use an Interface?

    . It is used to achieve total abstraction.
    . Since java does not support multiple inheritances in the case of class, by using an interface it can achieve multiple inheritances.
    . Any class can extend only 1 class but can any class implement infinite number of interface.
    . It is also used to achieve loose coupling.
    . Interfaces are used to implement abstraction. So the question arises why use interfaces when we have abstract classes?

The reason is, abstract classes may contain non-final variables, whereas variables in the interface are final, public and static.

// A simple interface

interface Player
{
    final int id = 10;
    int move();
}

Difference Between Class and Interface

The major differences between a class and an interface are:

Implementation: To implement an interface we use the keyword implements

Real-World Example: Let’s consider the example of vehicles like bicycle, car, bike………, they have common functionalities. So we make an interface and put all these common functionalities.
 And lets Bicycle, Bike, car ….etc implement all these functionalities in their own class in their own way.

Advantages of Interfaces in Java

The advantages of using interfaces in Java are as follows:

   1. Without bothering about the implementation part, we can achieve the security of the implementation.
   2. In Java, multiple inheritances is not allowed, however, you can use an interface to make use of it as you can implement more than one interface.

New Features Added in Interfaces in JDK 8

  1. Prior to JDK 8, the interface could not define the implementation. We can now add default implementation for interface methods. This default implementation has a special use and does not affect the intention behind interfaces.

     Suppose we need to add a new function in an existing interface. Obviously, the old code will not work as the classes have not implemented those new functions.
       So with the help of default implementation, we will give a default body for the newly added functions. Then the old codes will still work.

 2. Another feature that was added in JDK 8 is that we can now define static methods in interfaces that can be called independently without an object. Note: these methods are not inherited.

Extending Interfaces

One interface can inherit another by use of keyword extends. When a class implements an interface that inherit another interface, it must provide implementation for all method required by the interface inheritance chain.

Important Points About Interface or Summary of the Article:

    . We can’t create an instance(interface can’t be instantiated) of the interface but we can make the reference of it that refers to the Object of its implementing class.
    . A class can implement more than one interface.
    . An interface can extend to another interface or interface (more than one interface).
    . A class that implements the interface must implement all the methods in the interface.
    . All the methods are public and abstract. And all the fields are public, static, and final.
    . It is used to achieve multiple inheritances.
    . It is used to achieve loose coupling.

New Features Added in Interfaces in JDK 9

From Java 9 onwards, interfaces can contain the following also:

    1. Static methods
    2. Private methods
    3. Private Static methods

