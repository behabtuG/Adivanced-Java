The map interface is present in java.util package represents a mapping between a key and a value. The Map interface is not a subtype of the Collection interface.
 Therefore it behaves a bit differently from the rest of the collection types. A map contains unique keys.

Java-Collection-Framework-Fundamentals

Geeks, the brainstormer should have been why and when to use Maps?

Maps are perfect to use for key-value association mapping such as dictionaries. The maps are used to perform lookups by keys or
when someone wants to retrieve and update elements by keys. Some common scenarios are as follows:

    . A map of error codes and their descriptions.
    . A map of zip codes and cities.
    . A map of managers and employees. Each manager (key) is associated with a list of employees (value) he manages.
    . A map of classes and students. Each class (key) is associated with a list of students (value).

  Creating Map Objects

    Since Map is an interface, objects cannot be created of the type map. We always need a class that extends this map in order to create an object.
    And also, after the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the Map.

    Syntax: Defining Type-safe Map

    Map hm = new HashMap();
    // Obj is the type of the object to be stored in Map

  Characteristics of a Map Interface

      A Map cannot contain duplicate keys and each key can map to at most one value. Some implementations allow null key
      and null values like the HashMap and LinkedHashMap, but some do not like the TreeMap.
      The order of a map depends on the specific implementations. For example, TreeMap and LinkedHashMap have predictable orders, while HashMap does not.
      There are two interfaces for implementing Map in java. They are Map and SortedMap, and three classes: HashMap, TreeMap, and LinkedHashMap.

  Methods in Map Interface

  Classes that implement the Map interface are depicted in the below media and described later as follows:

  Class 1: HashMap

    HashMap is a part of Java’s collection since Java 1.2. It provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs.
    To access a value one must know its key. This class uses a technique called Hashing. Hashing is a technique of converting a large String to a small String that represents the same String.
    A shorter value helps in indexing and faster searches. Let’s see how to create a map object using this class.


