HashMap and Hashtable store key and value pairs in a hash table. When using a Hashtable or HashMap, we specify an object that is used as a key and the value that
 you want to be linked to that key. The key is then hashed, and the resulting hash code is used as the index at which the value is stored within the table. Now let us discuss with the help of an example.

Hashmap vs Hashtable

    HashMap is non-synchronized. It is not thread-safe and can’t be shared between many threads without proper synchronization code whereas Hashtable is synchronized.
     It is thread-safe and can be shared with many threads.
    HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
    HashMap is generally preferred over HashTable if thread synchronization is not needed.

    Now you must be wondering why HashTable doesn’t allow null and HashMap do?

    The answer is simple. In order to successfully store and retrieve objects from a HashTable, the objects used as keys must implement the hashCode method and the equals method.
     Since null is not an object, it can’t implement these methods. HashMap is an advanced version and improvement on the Hashtable. HashMap was created later.