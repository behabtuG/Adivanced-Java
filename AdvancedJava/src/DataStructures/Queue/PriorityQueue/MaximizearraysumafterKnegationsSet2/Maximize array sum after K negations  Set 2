Given an array of size n and a number k. We must modify array K number of times. Here modify array means in each operation we can replace
any array element arr[i] by -arr[i]. We need to perform this operation in such a way that after K operations, sum of array must be maximum?

Examples:

Input : arr[] = {-2, 0, 5, -1, 2}
        K = 4
Output: 10
// Replace (-2) by -(-2), array becomes {2, 0, 5, -1, 2}
// Replace (-1) by -(-1), array becomes {2, 0, 5, 1, 2}
// Replace (0) by -(0), array becomes {2, 0, 5, 1, 2}
// Replace (0) by -(0), array becomes {2, 0, 5, 1, 2}

Input : arr[] = {9, 8, 8, 5}
        K = 3
Output: 20

We strongly recommend that you click here and practice it, before moving on to the solution.

We have discussed a O(nk) solution in below post.
Maximize array sum after K negations | Set 1
The idea used in above post is to replace the minimum element arr[i] in array by -arr[i] for current operation. In this way we can make
sum of array maximum after K operations. Once interesting case is, once minimum element becomes 0, we donâ€™t need to make any more changes.
The implementation used in above solution uses linear search to find minimum element. The time complexity of the above discussed solution is O(nk)
In this post an optimized solution is implemented that uses a priority queue (or binary heap) to find minimum element quickly.

Below is the implementation of the idea. It uses PriorityQueue class in Java.

