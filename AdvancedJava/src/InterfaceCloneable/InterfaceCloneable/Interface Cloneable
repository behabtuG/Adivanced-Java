public interface Cloneable

A class implements the Cloneable interface to indicate to the Object.clone() method that it is legal for that method to make a field-for-field copy of instances of that class.

Invoking Object's clone method on an instance that does not implement the Cloneable interface results in the exception CloneNotSupportedException being thrown.

By convention, classes that implement this interface should override Object.clone (which is protected) with a public method. See Object.clone() for details on overriding this method.

Note that this interface does not contain the clone method. Therefore, it is not possible to clone an object merely by virtue of the fact that it implements this interface.
Even if the clone method is invoked reflectively, there is no guarantee that it will succeed.

The Java.lang.Cloneable interface is a marker interface. It was introduced in JDK 1.0. There is a method clone() in the Object class. Cloneable interface is implemented by a class to make Object.clone() method valid thereby making field-for-field copy.
This interface allows the implementing class to have its objects to be cloned instead of using a new operator.

Declaration

public interface Cloneable

Cloneable in Java

Cloneable is an interface that is used to create the exact copy of an object. It exists in java.lang package. A class must implement the Cloneable interface if we want to create the clone of the class object.

The clone() method of the Object class is used to create the clone of the object. However, if the class doesn't support the cloneable interface, then the clone() method generates the CloneNotSupportedException.

The syntax of the clone() method is given below.

    protected Object clone() throwsCloneNotSupportedException

  Example 1: Below program explains that If you will try to Clone an object which doesn’t implement the Cloneable interface, it will CloneNotSupportedException, which you may want to handle.

  Example 2: Below code explains the proper usage of the Cloneable interface to make the Object.clone() method legal.
   Classes that implement this interface should override the Object.clone() method (which is protected) so that it can be invoked.

   Deep Copy using clone() method

   Deep Object Cloning is like creating an exact copy of the original object by copying the fields from the original object to the cloned object.
   A separate memory is allocated for the cloned objects where the original object content is copied. clone() method can create both shallow and deep copy of the original object based on the implementation of it.
    Deep copy creates a new memory with the contents same as the original object. That’s why when we change the content of the original object after cloning, the changes do not reflect in the clone object.
     There are types of copies such as Deep, Shallow, and Lazy Copy. The below code explains the deep copy using the clone() method.

Note: This interface does not contain the clone method. Therefore, it is not possible to clone an object merely by virtue of the fact that it implements this interface.
      Even if the clone method is invoked reflectively, there is no guarantee that it will succeed.

      Advantages of clone method:

          If we use the assignment operator to assign an object reference to another reference variable then it will point to the same address location of the old object and no new copy of the object will be created.
           Due to this any changes in the reference variable will be reflected in the original object.
          If we use a copy constructor, then we have to copy all the data over explicitly i.e. we have to reassign all the fields of the class in the constructor explicitly.
          But in the clone method, this work of creating a new copy is done by the method itself. So to avoid extra processing we use object cloning.