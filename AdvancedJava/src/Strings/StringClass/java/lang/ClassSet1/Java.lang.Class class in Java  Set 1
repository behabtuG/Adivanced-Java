Java provides a class with name Class in java.lang package. Instances of the class Class represent classes and interfaces in a running
 Java application. The primitive Java types (boolean, byte, char, short, int, long, float, and double), and the keyword void are also
 represented as Class objects. It has no public constructor. Class objects are constructed automatically by the Java Virtual
 Machine(JVM). It is a final class, so we cannot extend it.

The Class class methods are widely used in Reflection API.

  Creating a Class object

     There are three ways to create Class object :

    1. Class.forName(“className”) : Since class Class doesn’t contain any constructor, there is static factory method present in class
       Class, which is Class.forName() , used for creating object of class Class. Below is the syntax :

       Class c = Class.forName(Strings className)

       The above statement creates the Class object for the class passed as a Strings argument(className). Note that the parameter
       className must be fully qualified name of the desired class for which Class object is to be created. The methods in any class
       in java which returns the same class object are also known as factory methods. The class name for which Class object is to be
        created is determined at run-time.
    2. Myclass.class : When we write .class after a class name, it references the Class object that represents the given class. It is
       mostly used with primitive data types and only when we know the name of class. The class name for which Class object is to be
       created is determined at compile-time. Below is the syntax :

       Class c = int.class

       Please note that this method is used with class name, not with class instances. For example

       A a = new A();   // Any class A
       Class c = A.class; // No error
       Class c = a.class; // Error

    3. obj.getClass() : This method is present in Object class. It return the run-time class of this(obj) object. Below is the syntax:

        A a = new A();   // Any class A
        Class c = a.getClass();

     Methods:

       1. Strings toString() : This method converts the Class object to a string. It returns the string representation which is the
          string “class” or “interface”, followed by a space, and then by the fully qualified name of the class. If the Class object
          represents a primitive type, then this method returns the name of the primitive type and if it represents void then it
          returns “void”.

          Syntax :
          public Strings toString()
          Parameters :
          NA
          Returns :
          a string representation of this class object.
          Overrides :
          toString in class Object

       2. Class<?> forName(Strings className) : As discussed earlier, this method returns the Class object associated with the class or
          interface with the given string name. The other variant of this method is discussed next.

           Syntax :
           public static Class<?> forName(Strings className) throws ClassNotFoundException
           Parameters :
           className - the fully qualified name of the desired class.
           Returns :
           return the Class object for the class with the specified name.
           Throws :
           LinkageError : if the linkage fails
           ExceptionInInitializerError - if the initialization provoked by this method fails
           ClassNotFoundException - if the class cannot be located

       3. Class<?> forName(Strings className,boolean initialize, ClassLoader loader) : This method also returns the Class object
          associated with the class or interface with the given string name using the given class loader.

          The specified class loader is used to load the class or interface. If the parameter loader is null, the class is loaded
          through the bootstrap class loader in. The class is initialized only if the initialize parameter is true and if it has not
          been initialized earlier.

           Syntax :
           public static Class<?> forName(Strings className,boolean initialize, ClassLoader loader)
           throws ClassNotFoundException
           Parameters :
           className - the fully qualified name of the desired class
           initialize - whether the class must be initialized
           loader - class loader from which the class must be loaded
           Returns :
           return the Class object for the class with the specified name.
           Throws :
           LinkageError : if the linkage fails
           ExceptionInInitializerError - if the initialization provoked by this method fails
           ClassNotFoundException - if the class cannot be located

       4. T newInstance() : This method creates a new instance of the class represented by this Class object. The class is created as
          if by a new expression with an empty argument list. The class is initialized if it has not already been initialized.

          Syntax :
          public T newInstance() throws InstantiationException,IllegalAccessException
          TypeParameters :
          T - The class type whose instance is to be returned
          Parameters :
          NA
          Returns :
          a newly allocated instance of the class represented by this object.
          Throws :
          IllegalAccessException - if the class or its nullary constructor is not accessible.
          InstantiationException - if this Class represents an abstract class, an interface,
          an array class, a primitive type, or void
          or if the class has no nullary constructor;
          or if the instantiation fails for some other reason.
          ExceptionInInitializerError - if the initialization provoked by this method fails.
          SecurityException - If a security manager, s, is present

       5. boolean isInstance(Object obj) : This method determines if the specified Object is assignment-compatible with the object
          represented by this Class. It is equivalent to instanceof operator in java.

          Syntax :
          public boolean isInstance(Object obj)
          Parameters :
          obj - the object to check
          Returns :
          true if obj is an instance of this class else return false

       6. boolean isAssignableFrom(Class<?> cls) : This method determines if the class or interface represented by this Class object
          is either the same as, or is a superclass or superinterface, of the class or interface represented by the specified Class
          parameter.

          Syntax :
           public boolean isAssignableFrom(Class<?> cls)
           Parameters :
           cls - the Class object to be checked
           Returns :
           true if objects of the type cls can be assigned to objects of this class
           Throws:
           NullPointerException - if the specified Class parameter is null.

       7. boolean isInterface() : This method determines if the specified Class object represents an interface type.

          Syntax :
          public boolean isInterface()
          Parameters :
          NA
          Returns :
          return true if and only if this class represents an interface type else return false

       8. boolean isPrimitive() : This method determines if the specified Class object represents a primitive type.

          Syntax :
          public boolean isPrimitive()
          Parameters :
          NA
          Returns :
          return true if and only if this class represents a primitive type else return false

       9. boolean isArray() : This method determines if the specified Class object represents an array class.

          Syntax :
          public boolean isArray()
          Parameters :
          NA
          Returns :
          return true if and only if this class represents an array type else return false

       10. boolean isAnonymousClass() : This method returns true if and only if the this class is an anonymous class. A anonymous
           class is a like a local classes except that they do not have a name.

           Syntax :
           public boolean isAnonymousClass()
           Parameters :
           NA
           Returns :
           true if and only if this class is an anonymous class.
           false,otherwise.

       11. boolean isLocalClass() : This method returns true if and only if the this class is a local class. A local class is a class
           that is declared locally within a block of Java code, rather than as a member of a class.

           Syntax :
           public boolean isLocalClass()
           Parameters :
           NA
           Returns :
           true if and only if this class is a local class.
           false,otherwise.

       12. boolean isMemberClass() : This method returns true if and only if the this class is a Member class.A member class is a class
           that is declared as a non-static member of a containing class.

           Syntax :
           public boolean isMemberClass()
           Parameters :
           NA
           Returns :
           true if and only if this class is a Member class.
           false,otherwise.

       13. boolean isEnum() : This method returns true if and only if this class was declared as an enum in the source code.

           Syntax :
           public boolean isEnum()
           Parameters :
           NA
           Returns :
           true if this class was declared as an enum in the source code.
           false,otherwise.

       14. boolean isAnnotation() : This method determines if this Class object represents an annotation type. Note that if this
           method returns true, isInterface() method will also return true, as all annotation types are also interfaces.

          Syntax :
          public boolean isAnnotation()
          Parameters :
          NA
          Returns :
          return true if and only if this class represents an annotation type else return false

       15. Strings getName() : This method returns the name of the entity (class, interface, array class, primitive type, or void)
           represented by this Class object, as a Strings.

           Syntax :
           public Strings getName()
           Parameters :
           NA
           Returns :
           returns the name of the name of the entity
           represented by this object.

       16. Strings getSimpleName() : This method returns the name of the underlying class as given in the source code. It returns an
           empty string if the underlying class is anonymous class.

           The simple name of an array is the simple name of the component type with “[]” appended. In particular the simple name of
           an array whose component type is anonymous is “[]”.

           Syntax :
           public Strings getSimpleName()
           Parameters :
           NA
           Returns :
           the simple name of the underlying class

       17. ClassLoader getClassLoader() : This method returns the class loader for this class. If the class loader is bootstrap
           classloader then this method returned null, as bootstrap classloader is implemented in native languages like C, C++.
           If this object represents a primitive type or void,then also null is returned.

           Syntax :
           public ClassLoader getClassLoader()
           Parameters :
           NA
           Returns :
           the class loader that loaded the class or interface represented by this object
           represented by this object.
           Throws :
           SecurityException - If a security manager and its checkPermission method
           denies access to the class loader for the class.

       18. TypeVariable<Class<T>>[ ] getTypeParameters() : This method returns an array of TypeVariable objects that represent the
           type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order

           Syntax :
           public TypeVariable<Class<T>>[] getTypeParameters()
           Specified by:
           getTypeParameters in interface GenericDeclaration
           Parameters :
           NA
           Returns :
           an array of TypeVariable objects that represent the type variables declared
           by this generic declaration represented by this object.
           Throws :
           GenericSignatureFormatError - if the generic signature of this generic declaration
           does not conform to the format specified in JVM.

       19. Class<? super T> getSuperclass() : This method returns the Class representing the superclass of the entity (class,
           interface, primitive type or void) represented by this Class.
           If this Class represents either the Object class, an interface, a primitive type, or void, then null is returned.
           If this object represents an array class then the Class object representing the Object class is returned.

           Syntax :
           public Class<? super T> getSuperclass()
           Parameters :
           NA
           Returns :
           the superclass of the class represented by this object

       20. Type getGenericSuperclass() : This method returns the Type representing the direct superclass of the entity (class,
           interface, primitive type or void) represented by this Class.

           If this Class represents either the Object class, an interface, a primitive type, or void, then null is returned. If
           this object represents an array class then the Class object representing the Object class is returned.

           Syntax :
           public Type getGenericSuperclass()
           Parameters :
           NA
           Returns :
           the superclass of the class represented by this object
           Throws:
           GenericSignatureFormatError - if the generic class signature does not conform to the format
           specified in JVM
           TypeNotPresentException - if the generic superclass refers to a non-existent
           type declaration MalformedParameterizedTypeException - if the generic
           superclass refers to a parameterized type
           that cannot be instantiated for any reason

       21. Class<?>[] getInterfaces() : This method returns the interfaces implemented by the class or interface represented by this
           object.

           If this object represents a class or interface that implements no interfaces, the method returns an array of length 0.
           If this object represents a primitive type or void, the method returns an array of length 0.

           Syntax :
           public Class<?>[] getInterfaces()
           Parameters :
           NA
           Returns :
           an array of interfaces implemented by this class.

       22. Type[] getGenericInterfaces() : This method returns the Types representing the interfaces directly implemented by the
           class or interface represented by this object.

           If this object represents a class or interface that implements no interfaces, the method returns an array of length 0.
           If this object represents a primitive type or void, the method returns an array of length 0.

           Syntax :
           public Type[] getGenericInterfaces()
           Parameters :
           NA
           Returns :
           an array of interfaces implemented by this class
           Throws:
           GenericSignatureFormatError - if the generic class signature does not conform to the format
           specified in JVM
           TypeNotPresentException - if the generic superinterfaces refers to
           a non-existent type declaration MalformedParameterizedTypeException - if the
           generic superinterfaces refers to a parameterized type
           that cannot be instantiated for any reason

       23. Package getPackage() : This method returns the package for this class. The classloader subsystem in JVM Architecture used
           this method to find the package of a class or interface.

           Syntax :
           public Package getPackage()
           Parameters :
           NA
           Returns :
           the package of the class,
           or null if no package information is available
           from the archive or codebase.

       24. Field[] getFields() : This method returns an array of Field objects reflecting all the accessible public fields of the
           class(and of all its superclasses) or interface(and of all its superclasses) represented by this Class object.

          Syntax :
          public Field[] getFields()  throws SecurityException
          Parameters :
          NA
          Returns :
          the array of Field objects representing the public fields
          and  array of length 0 if the class or interface has no accessible public fields
          or if this Class object represents a primitive type or void.
          Throws :
          SecurityException - If a security manager, s, is present.

       25. Class<?>[ ] getClasses() : This method returns an array containing Class objects representing all the public classes and
           interfaces that are members of the class represented by this Class object. The array contains public class and interface
           members inherited from superclasses and public class and interface members declared by the class.

          This method returns an array of length 0 if this Class object has no public member classes or interfaces.
          This method also returns an array of length 0 if this Class object represents a primitive type, an array class, or void.

          Syntax :
          Class<?>[ ] getClasses()
          Parameters :
          NA
          Returns :
          the array of Class objects representing the public members of this class
          Throws :
          SecurityException - If a security manager, s, is present.

       26. Method[] getMethods() : This method returns an array of Method objects reflecting all the accessible public methods of the
           class or interface and those inherited from superclasses and super interfaces represented by this Class object.

           Syntax :
           public Method[] getMethods() throws SecurityException
           Parameters :
           NA
           Returns :
           the array of Method objects representing the public methods
           and  array of length 0 if the class or interface has no accessible public method
           or if this Class object represents a primitive type or void.
           Throws :
           SecurityException - If a security manager, s, is present.

       27. Constructor<?>[] getConstructors() : This method returns an array of Constructor objects reflecting all the public
           constructors of the class represented by this Class object.

           Syntax :
           public Constructor<?>[] getConstructors() throws SecurityException
           Parameters :
           NA
           Returns :
           the array of Constructor objects representing the public constructors of this class
           and  array of length 0 if the class or interface has no accessible public constructor
           or if this Class object represents a primitive type or void.
           Throws :
           SecurityException - If a security manager, s, is present.

       28. Field getField(Strings fieldName) : This method returns a Field object that reflects the specified public member field of
           the class or interface represented by this Class object.

           Syntax :
           public Field getField(Strings fieldName) throws NoSuchFieldException,SecurityException
           Parameters :
           fieldName -  the field name
           Returns :
           the Field object of this class specified by name
           Throws :
           NoSuchFieldException - if a field with the specified name is not found.
           NullPointerException - if fieldName is null
           SecurityException - If a security manager, s, is present.

       29. Method getMethod(Strings methodName,Class… parameterTypes) : This method returns a Method object that reflects the specified
           public member method of the class or interface represented by this Class object.

           Syntax :
           public Method getMethod(Strings methodName,Class... parameterTypes) throws
           NoSuchFieldException,SecurityException
           Parameters :
           methodName -  the method name
           parameterTypes - the list of parameters
           Returns :
           the method object of this class specified by name
           Throws :
           NoSuchMethodException - if a method with the specified name is not found.
           NullPointerException - if methodName is null
           SecurityException - If a security manager, s, is present.

       30. Constructor<?> getConstructor(Class<?>… parameterTypes) : This method returns a Constructor object that reflects the
           specified public constructor of the class represented by this Class object.The parameterTypes parameter is an array of
           Class objects that identify the constructor’s formal parameter types, in declared order.

           Syntax :
           public Constructor<?> getConstructor(Class<?>... parameterTypes)
           throws NoSuchMethodException,SecurityException
           Parameters :
           parameterTypes - the list of parameters
           Returns :
           the Constructor object of the public constructor that matches the specified parameterTypes
           Throws :
           NoSuchMethodException - if a Constructor with the specified parameterTypes is not found.
           SecurityException - If a security manager, s, is present.


       31. T cast(Object obj) : This method is used to casts an object to the class or interface represented by this Class object.

           Syntax :
           public T cast(Object obj)
           TypeParameters :
           T - The class type whose object is to be cast
           Parameters :
           obj - the object to be cast
           Returns :
           the object after casting, or null if obj is null
           Throws :
           ClassCastException - if the object is not null and is not assignable to the type

       32. <U> Class<? extends U> asSubclass(Class<U> clazz) : This method is used to cast this Class object to represent a subclass
           of the class represented by the specified class object.It always returns a reference to this class object.

           Syntax :
           public <U> Class<? extends U> asSubclass(Class<U> class)
           TypeParameters :
           U - The superclass type whose object is to be cast
           Parameters :
           clazz - the superclass object to be cast
           Returns :
           this Class object, cast to represent a subclass of the specified class object.
           Throws :
           ClassCastException - if this Class object does not represent a
           subclass of the specified class
           (here "subclass" includes the class itself).

