StringBuffer is a peer class of String that provides much of the functionality of strings. The string represents fixed-length,
immutable character sequences while StringBuffer represents growable and writable character sequences. StringBuffer may have
characters and substrings inserted in the middle or appended to the end. It will automatically grow to make room for such additions
and often has more characters preallocated than are actually needed, to allow room for growth.

StringBuffer class is used to create mutable (modifiable) string. The StringBuffer class in java is same as String class except it is
mutable i.e. it can be changed.

 Important Constructors of StringBuffer class

    . StringBuffer(): creates an empty string buffer with the initial capacity of 16.
    . StringBuffer(String str): creates a string buffer with the specified string.
    . StringBuffer(int capacity): creates an empty string buffer with the specified capacity as length.

   1) append() method

      The append() method concatenates the given argument with this string.

   2) insert() method

      The insert() method inserts the given string with this string at the given position.

   3) replace() method

      The replace() method replaces the given string from the specified beginIndex and endIndex-1.

   4) delete() method

       The delete() method of StringBuffer class deletes the string from the specified beginIndex to endIndex-1.

   5) reverse() method

      The reverse() method of StringBuilder class reverses the current string. Example:

   6) capacity() method

       The capacity() method of StringBuffer class returns the current capacity of the buffer. The default capacity of the buffer
       is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2.
       For example if your current capacity is 16, it will be (16*2)+2=34.

   Some Interesting Facts about the StringBuffer class

     Do keep the following points in the back of your mind:

       . java.lang.StringBuffer extends (or inherits from) Object class.
       . All Implemented Interfaces of StringBuffer class: Serializable, Appendable, CharSequence.
       . public final class StringBuffer extends Object implements Serializable, CharSequence, Appendable.
       . String buffers are safe for use by multiple threads. The methods can be synchronized wherever necessary so that all the
         operations on any particular instance behave as if they occur in some serial order.
       . Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence) this class
         synchronizes only on the string buffer performing the operation, not on the source.
       . It inherits some of the methods from the Object class which such as clone(), equals(), finalize(), getClass(), hashCode(),
         notifies(), notifyAll().

       Remember: StringBuilder, J2SE 5 adds a new string class to Java’s already powerful string handling capabilities. This new
        class is called StringBuilder. It is identical to StringBuffer except for one important difference: it is not synchronized,
        which means that it is not thread-safe. The advantage of StringBuilder is faster performance. However, in cases in which you
        are using multithreading,  you must use StringBuffer rather than StringBuilder.

     Constructors of StringBuffer class

        1. StringBuffer(): It reserves room for 16 characters without reallocation

           StringBuffer s = new StringBuffer();

       2. StringBuffer( int size): It accepts an integer argument that explicitly sets the size of the buffer.

          StringBuffer s = new StringBuffer(20);

       3. StringBuffer(String str): It accepts a string argument that sets the initial contents of the StringBuffer object and
          reserves room for 16 more characters without reallocation.

          StringBuffer s = new StringBuffer("GeeksforGeeks");

   Methods of StringBuffer class

 Note: Besides that, all the methods that are used in the String class can also be used. These auxiliary methods are as
       follows:

   . ensureCapacity(): It is used to increase the capacity of a StringBuffer object. The new capacity will be set to either the
       value we specify or twice the current capacity plus two (i.e. capacity+2), whichever is larger. Here, capacity specifies the
       size of the buffer.

      Syntax:

        void ensureCapacity(int capacity)

   . appendCodePoint(int codePoint): This method appends the string representation of the codePoint argument to this sequence.

      Syntax:

        public StringBuffer appendCodePoint(int codePoint)

   . charAt(int index): This method returns the char value in this sequence at the specified index.

       Syntax:

         public char charAt(int index)

   . IntStream chars(): This method returns a stream of int zero-extending the char values from this sequence.

      Syntax:

        public IntStream chars()

   . int codePointAt(int index): This method returns the character (Unicode code point) at the specified index.

      Syntax:

       public int codePointAt(int index)

   . int codePointBefore(int index): This method returns the character (Unicode code point) before the specified index.

       Syntax:

        public int codePointBefore(int index)

   . int codePointCount(int beginIndex, int endIndex): This method returns the number of Unicode code points in the specified text
      range of this sequence.

      Syntax:

        public int codePointCount(int beginIndex, int endIndex)

   . IntStream codePoints(): This method returns a stream of code point values from this sequence.

      Syntax:

        public IntStream codePoints()

   . void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin): In this method, the characters are copied from this
      sequence into the destination character array dst.

     Syntax:

       public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)

   . int indexOf(String str): This method returns the index within this string of the first occurrence of the specified substring.

      Syntax:

        public int indexOf(String str)
        public int indexOf(String str, int fromIndex)

   . int lastIndexOf(String str): This method returns the index within this string of the last occurrence of the specified substring.

      Syntax:

        public int lastIndexOf(String str)
        public int lastIndexOf(String str, int fromIndex)

   . int offsetByCodePoints(int index, int codePointOffset): This method returns the index within this sequence that is offset from
      the given index by codePointOffset code points.

      Syntax:

        public int offsetByCodePoints(int index, int codePointOffset)

   . void setCharAt(int index, char ch): In this method, the character at the specified index is set to ch.

      Syntax:

        public void setCharAt(int index, char ch)

   . void setLength(int newLength): This method sets the length of the character sequence.

      Syntax:

        public void setLength(int newLength)

   . CharSequence subSequence(int start, int end): This method returns a new character sequence that is a subsequence of this
     sequence.

     Syntax:

       public CharSequence subSequence(int start, int end)

   . String substring(int start): This method returns a new String that contains a subsequence of characters currently contained in
     this character sequence.

     Syntax:

       public String substring(int start)
       public String substring(int start,int end)

   . String toString(): This method returns a string representing the data in this sequence.

      Syntax:

        public String toString()

   . void trimToSize(): This method attempts to reduce storage used for the character sequence.

     Syntax:

       public void trimToSize()

     Above we only have discussed the most widely used methods and do keep a tight bound around them as they are widely used in
     programming geeks.

   Implementation:

     Example 1: length() and capacity() Methods

     Example 2: append()

       It is used to add text at the end of the existing text.

       Here are a few of its forms:

       StringBuffer append(String str)
       StringBuffer append(int num)

     Example 3: insert()

        It is used to insert text at the specified index position.

        Syntax: These are a few of its as follows:

           StringBuffer insert(int index, String str)
           StringBuffer insert(int index, char ch)

        Here, the index specifies the index at which point the string will be inserted into the invoking StringBuffer object.

     Example 4: reverse( )

        It can reverse the characters within a StringBuffer object using reverse( ). This method returns the reversed object
          on which it was called.

     Example 5: delete( ) and deleteCharAt()

         It can delete characters within a StringBuffer by using the methods delete( ) and deleteCharAt( ).The delete( ) method
         deletes a sequence of characters from the invoking object. Here, the start Index specifies the index of the first
         character to remove, and the end Index specifies an index one past the last character to remove. Thus, the substring
         deleted runs from start Index to endIndex–1. The resulting StringBuffer object is returned. The deleteCharAt( ) method
         deletes the character at the index specified by loc. It returns the resulting StringBuffer object.

         Syntax:

           StringBuffer delete(int startIndex, int endIndex)
           StringBuffer deleteCharAt(int loc)

     Example 6: replace()

         It can replace one set of characters with another set inside a StringBuffer object by calling replace( ). The substring
         being replaced is specified by the indexes start Index and endIndex. Thus, the substring at start Index through endIndex–1
         is replaced. The replacement string is passed in str. The resulting StringBuffer object is returned.

        Syntax:

          StringBuffer replace(int startIndex, int endIndex, String str)

